
libc.a
------

This libc/ directory of the project holds a trimmed down version of the
prc-tools libc.a library.  This library gets created by only using
selected parts (.o files) of the original .a library.

The motivation was to catch all instances where ANSI C runtime parts
which are not implemented in the osglue/ source are "silently resolved"
by the libc.a instead of generating build warnings or errors.
Especially the I/O routines and memory allocation are important to not
"seem to work somehow by chance" or even worse be implemented
differently in completely independent parts of the binary, which would
lead to hard to find or undiscovered problems in the application.
Instead it should be noticed immediately when the application references
routines which the osglue/ runtime does not provide.

So this project trims down the "system provided" C library to only
contain the ctype kind of routines as well as memory and string
manipulating operations, while the OS dependent stuff gets implemented
in the osglue/ part of the project, either by using the PalmOS API or by
implementing the feature anew.


Since the .o files are extracted from the original .a library and merely
get packed into another .a container with less routines but identical
interface and unmodified source, I consider this approach still
compliant with the LGPL.  The application still merely links to the
newly created libc.a file as it would have before against the original
libc.a file.  The "derived work" (the way how the new library gets
created) is publically available here and I don't claim any copyright on
that library nor do I release that modified library under a different
license.  What's under the MIT license is the instruction which parts of
the LPGLed libc.a to provide to the linker phase (the Makefile).

Should the above point of view be inappropriate and manipulating the
libc.a by rerolling it from only selected parts to detect unwanted
dependencies by means of a restricted API width not comply with the
LGPL, I'd like to be told.  In that case the project would need to be
changed so that linking against the trimmed down libc.a library is an
internal development option only and won't be used for released versions
of the application software.

