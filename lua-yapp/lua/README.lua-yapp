
 README for the Lua project's PalmOS port
------------------------------------------

There are several ports of Lua to the PalmOS platform.  I'm aware of
these projects:
- PLua (http://meusite.uai.com.br/~mmand/plua/plua.htm), a closed source
  implementation of Lua 4.0 (PLua 1.0 and 1.1), supposedly with an
  update to Lua 5 (5.0.3 in PLua 2.x, which I'm unable to find on the
  'Net -- http://tech.groups.yahoo.com/group/plua/ "does not work" for
  me)
- Lua for PalmOS (http://luaforge.net/projects/luapalmos/), an MIT
  licensed implementation of Lua 5 which requires MetroWorks CodeWarrier
  (and thus MS Windows, and thus an Intel PC) and seems to have been
  stale for the past years
- Lua for PalmOS (Cobalt) (http://luaforge.net/projects/luatopalmos/)
  which is still in the planning phase
- Yet Another PalmOS Port of Lua (lua-yapp)
  (http://luaforge.net/projects/lua-yapp/) which is MIT licensed and
  uses GNU tools to build

This text is about lua-yapp's changes to the lua.org sources.


The lua-yapp project is a port of Lua version 5.1.2 to PalmOS.  The
original implementation was done by Gerhard Sittig.  The current status
of the port is rather incomplete (quite a few parts of the OS runtime
are unfinished or yet to be started, the existing code is almost
untested, the GUI is very plain and the PalmOS specific binding is more
of a placeholder -- what's available is a simple text input, code
compilation and execution while the standard libraries are available).

Although the PalmOS development was done with an ANSI compliant compiler
(gcc), no full ANSI runtime environment is available.  That's why the
"osglue" part of the project was introduced to emulate the basis which
the Lua project assumes to be available (some of the glue code is merely
wrapping the PalmOS API, other parts are rather complex (re?)writes of
features which usually are already available on other platforms).

Another issue is the rather limited PalmOS system:
- code segments cannot exceed the 64KB limit, jump instructions only
  allow for 32KB distances; that's why the "code segment" declarations
  for all routines were added
  - some of them need to refer to typedef'ed data which will be declared
    later, I don't know how to solve this more cleanly and still keep
    the declarations in a single spot in the file
  - is there a way to put all those added declarations into one single
    spot for the complete project? we have the "lua_c" etc defines but
    most types need to be forward declared or "cheated" somehow
  - can these declarations be put into the upstream project somehow?
- the "int" data type has 16 bits only (Lua copes with this already)
- some optimization, or code section placement, or whatever it is,
  caused hard to find and "very interesting" effects; which is why some
  macros were "unrolled" into explicit routines (most notable:
  luaO_log2(), ceillog2(), hashstr()) and some complex conditions were
  changed to be determined "in individual steps" (see the newkey(),
  luaH_getstr() routines)
- a minor adjustment was needed in math_frexp() since MathLib.prc's
  frexp() routine uses an Int16 data type for the returned exponent

Things which the luaconf.h file already prepared to get adjusted:
- PalmOS provides ErrLongJump() and ErrSetJump() to implement the
  setjmp() style interface
- the LUA_INTEGER type was set to "long"
- the LUA_NUMBER type could be set to "long" or "double" ("double" is
  not supported originally by PalmOS but the input/output routines were
  created in the osglue and the MathLib library provides routines to
  handle IEEE754 floating point numbers; the declarations for both
  alternatives are grouped together and can be chosen by setting one
  single LUA_NUMBER_{LONG,DOUBLE} define in luaconf.h
- the Lua 5.0 compat stuff was disabled in the port (varargs access, the
  mod operation, nested long strings, gfind, openlib)

The src/Makefile file grew support for "make palmos" (assuming a
location for the PalmOS SDK and prc-tools, which might need to be made
adjustable, maybe together with other compile flags).  And "make clean"
does remove all *.i, *.s as well as all *.o and *.a files (this is a
leftover from diagnosing macro vs function call stuff but does not harm
when still present).

# vim:ft=text tw=72
