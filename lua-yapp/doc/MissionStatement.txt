
This is how I applied for having the project hosted on
LuaForge.net.  It certainly will be fun to return here after
some time has passed and see how things developed and whether
we kept that direction. :)


the publicly visible project summary
====================================

lua-yapp is a port of Lua to the PalmOS platform,
with a UI to edit and run Lua source on the device,
and a binding to the PalmOS specific API,
written in the C language with GNU tools,
targetting PalmOS 3.x and above


the non public project purpose declaration
==========================================

short text which made it through the webinterface
-------------------------------------------------

MIT licensed PalmOS port of Lua; with OS glue (ANSI C runtime), a
PalmOS UI to edit and run Lua source code, and a "palmos" module
to use the PalmOS API from within Lua; uses GNU make and
prc-tools, targets m68k and PalmOS 3.x devices; no desktop
software planned

intends to have the source, documentation, binary distributions
and project website hosted on LuaForge


the initial complete description of goals and priorities
--------------------------------------------------------

This project's goal is to port the Lua project to the PalmOS
platform.  The VM as well as the parser/compiler shall work, the
underlying ANSI C runtime shall be either wrapped, emulated or
newly implemented.  One of the priorities is to enable an almost
unmodified or even the original upstream Lua project to run on
PalmOS.

Once the core and its foundation are in place, a UI is built on
top which allows to enter/edit Lua source code, load and store
Lua source or bytecode in several "name spaces" (memo pad,
FileMgr streams, optionally a hierarchical filesystem held in a
pdb database).  Entering/loading source or bytecode and running
it from within the UI is mandatory.  Running saved source or
bytecode in "scripted" mode is a future option.

Another goal of the project is to create a Lua binding for the
PalmOS platform.  Therefor a "palmos" module is planned which
extends Lua with routines to handle resources and databases, text
and graphics output, optionally UI elements or communication
devices (serial or infra red).  If possible and viable PLua
compatibility might be a highly prioritized goal (either native
or much more probable in "compat" mode).

The project intends to either not or not mandatorily make use of
the ARM processor to not exclude those users of PalmOS 3.x and
4.x devices (Visor and most "phone type" gadgets as I understand
it).  Another effect of that restriction is that the software
runs on POSE, the emulator.  Should in the further development
ARM support be introduced, it will remain an option in addition
to all functionality being available for m68k machines.

The project uses the OpenSource prc-tools and GNU make to build
the binaries.  This allows users to participate even when they
don't have a spare Intel machine, an MS Windows license or a $400
CodeWarrior IDE.  The source and its documentation are written in
English.  Localization or translations may be introduced but will
remain an option.

The author intends to release all components of the project (the
PalmOS port with the OS glue, the PalmOS UI, the "palmos" OS/API
binding) under the MIT license.  The Lua core (the upstream
project) already is under the MIT license.  The LGPLed MathLib is
used and shipped with the binary, but that is compliant with that
lib's license, too.  Contributions will only be accepted when
they agree to be released under the MIT license, several versions
under differing licenses are not planned and are unwanted.

This project does not intend to provide desktop side software.
Compiling Lua source code to bytecode happens on the PalmOS
device within the PalmOS software with its UI.  Synchronization
of files generated on the PalmOS device by Lua software would
happen by using the memo pad or by simply backing up the pdb
which emulates the filesystem visible to Lua apps.  Creating
bytecode on a desktop and loading it into the PalmOS software
won't be possible immediately due to the difference in data type
widths and internal representation of numbers, but the PalmOS
port might optionally grow a loader which is capable of loading
(and converting on the fly) bytecode generated on other typical
desktop systems.  Generating bytecode on a desktop machine in the
native format of the PalmOS port as well as interpreting the
filesystem pdb on the desktop side could be the scope or parts of
other projects.

The author intends to host the project's documentation, source
code, binary distributions and the project's website on LuaForge;
active contributors for the PalmOS binding or the PalmOS UI may
become project members.  The documentation will consist of mere
text files.  The source code of the currently existing
implementation has some 4K LOC for the OS glue and some 2K LOC
for the UI compared to the 18K LOC of the Lua 5.1.1 source tree.
The binary prc has some 280KB in size, 150KB thereof being the
Lua core with the parser and the base libs, and 50KB for the
included MathLib.  The project will include ("import") versions
of the upstream Lua project, unless an unmodified version can be
used to create the PalmOS software.

